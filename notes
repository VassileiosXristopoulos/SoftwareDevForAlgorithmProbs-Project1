το w ειναι σταθερα σε ολο το προγραμμα
ΕΥΚΛΕΙΔΙΑ:
καθε h() θα εχει το δικο του v και t
t ομοιομορφη
r ομοιομορφοι

ΙΔΕΑ: 
κανω L Hash Tables	
Καθε hash table:
	-εχει την κ-διασταση hash function g() απο την οποια θα προκυψει η φ()
	-εχει την hash function της φ()
	-εχει k συναρτησεις h() που η καθε μια εχει δικο της v και t και ολες εχουν ιδιο w
	-εχει τα δικα του r1,r2,..,rk
οταν εισαγω ενα σημειο:
	το περναω απο ολες τις h()
	βρισκω τι θα μου δωσει η g()
	βρισκω τι θα μου δωσει η φ() 
	το βαζω στο αντιστοιχο bucket μαζι με την αντιστοιχη g() 
οταν κανω query ενα στοιχειο:
	το περναω απο ολες τις h() 
	βρισκω την φ() και παω στο αντιστοιχο bucket 
	για καθε στοιχειο του bucket: 
		τσεκαρω εαν η g() του query_item ειναι ιδια με την g() του στοιχειου του bucket 
		εαν ναι τοτε υπολογιζω την αποσταση μεταξυ των διανυσματων
	
	



ΚΟΜΜΑΤΙΑ:
-εχω ευθεια v η οποια ειναι vector με d (διασταση) στοιχεια που το καθενα βρισκεται τυχαια απο γκαουσιανη κατανομη
-εχω για καθε h το v και το t που του αντιστοιχει
-εχω τα ri για το φ() τα οποια ειναι vectors d στοιχειων
-εχω για καθε στοιχειο του hash table την g() που του αντιχτοιχει
-εχω για καθε g() τα hi() που της αντιχτοιχουν (??)

class hash_table{
	//hash table
	vector<hashFunction> H;
	vector<float> r_vector; //ri
	
	int hash_f(Item item){
		ret = ( Σ[Η(i).hash(item)*r(i)] mod M ) mod TableSize;
		tmp_g = H(i).hash_item(item);
		item.set_g_vector(tmp_g);
		return ret;
	}
}

class hashFuction{ //h()
	vector<float> v;
	float t;
	
	
	int hash(Item item);
};


