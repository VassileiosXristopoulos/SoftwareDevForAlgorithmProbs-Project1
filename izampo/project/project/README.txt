-Ονόματα Ομάδας:
1)Αργυρόπουλος Κωνσταντίνος Α.Μ: 1115201500012
2)Χριστόπουλος Βασίλειος Α.Μ: 1115201500181

-Εντολή μεταγλώττισης: g++ -o project main.cpp user.cpp punter.cpp trader.cpp director.cpp

-Εντολές εκτέλεσης:
1) Για εγγραφή στο σύστημα: ./project -R
2) Για είσοδο στο σύστημα: ./project

-Μεθοδολογία που ακολουθήθηκε:
Το πρόγραμμα έχει δομηθεί με βαση 4 κλάσεις όπου η superclass όλων ειναι η "user" η οποία
περιγράφει τις λειτουργίες ενός guest. Η κλάση punter κληρονομεί τα χαρακτηριστικά της
user (is a) έχοντας και τα δικά της καθώς περιγράφει έναν παίχτη. Αντίστοιχα και οι υπόλοιπες.
Ακολουθήθηκε encapsulation των members της κάθε κλάσης απο τον έξω κόσμο και χρησιμοποιήθηκε
η protected απόκρυψη μεταξύ των κλάσεων αντι  setters-gettes για να είναι πιο ευανάγνωστος
ο κώδικας λόγω του όγκου του.

-Περιγραφή μέσω βημάτων της μεθοδολογίας:
Για να επιτευχθεί η περιήγηση στο πρόγραμμα, οι συναρτήσεις των κλάσεων που δεν βρίσκονται
στα κάτω άκρα μιας διαδρομής του δέντρου κληρονομικότητας, επιστρέφουν string ετσι ώστε να 
γινεται γνωστό απο τις υπερκλάσεις τι operation έγινε απο τις υποκλάσεις έτσι ώστε να εμφανισ-
τούν τα σωστά αποτελέσματα. Οι συναρτήσεις του προγράμματος όταν επεξεργάζονται αρχεία 
(ανάκτηση, γραφή) χρησιμοποιούν 2 μεθοδολογιές
1η μεθοδολογία: Εφαρμόζεται μονο οταν αλλάζουμε μόνο ενα στοιχείο απο ένα αρχείο. Τα δεδομένα 
μπαίνουν σε 3 strings, first για το κομμάτι του αρχείου απο την αρχή μέχρι πριν το στοιχείο
που θα αλλάξουμε, second (η πιθανών άλλο όνομα) για το δεδομένο που θα αλλαχθεί, third για 
το κομμάτι απο μετά το δεδομένο που θα αλλαχθεί μέχρι το τέλος. Εφόσον γίνει η ανάκτηση και η
επεξεργασία το second και το third  γινονται append στο first και το first γράφεται το αρχείο.
Η παραπάνω μεθοδολογία χρησιμοποιείται στις: Rename, Password, Place, Deposit, Freebets. 
2η μεθοδολογία: Όπως έχει αναφερθεί και στο Lists, το κάθε αρχείο γίνεται ανάκτηση σε πίνακα
τύπου string και στη συνέχεια επεξεργάζεται και γράφεται στο αρχείο. Χρησιμοποιείται στις
υπόλοιπες συναρτήσεις του προγράμματος που χρειάζεται τέτοια υλοποίηση.
Έχει προστεθεί μια συνάρτηση empty η οποία ελέγχει εάν το αρχείο ειναι κενό επιστρέφοντας
το αποτέλεσμα της εξίσωσης του αποτελέσματος της συνάρτησης peek πανω στο αρχείο και του 
eof οπου εάν είναι αληθής σημαίνει οτι το αρχείο είναι κενό. Έχει χρησιμοποιηθεί το ios::app
όπου app είναι η σταθερά που προσδιορίζει οτι πρέπει να φτάσεις στο τέλος του αρχείου για 
να γράψεις οτιδήποτε, και αυτό χρησιμεύει στη διαδικασία γραφής του audit.log που καταγράφει
όλα τα operations που έγιναν στο σύστημα. Τέλος, έχουμε πάρει την παραδοχή οτι όταν ο χρήστης 
φτάσει στο τελευταίο επίπεδο του αρχείου ιεραρχίας, το σύστημα περιμένει να δεχθεί είσοδο 
για το τι θα εκτελεστεί, δηλαδή δεν στέλνει τον χρήστη αυτόματα στο Home αλλα ούτε κλείνει.
